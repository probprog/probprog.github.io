
; sample-stick-index is a procedure that samples an index from
; a potentially infinite dimensional discrete distribution 
; lazily constructed by a stick breaking rule
[assume sample-stick-index (lambda (breaking-rule index)
  (if (flip (breaking-rule index))
      index
      (sample-stick-index breaking-rule (+ index 1))))]


; sethuraman-stick-picking-procedure returns a procedure 
; that picks a stick each time its called from the set of sticks
; lazily constructed via the closed-over one-parameter stick breaking
; rule
[assume make-sethuraman-stick-picking-procedure (lambda (concentration)
  (begin (define V (mem (lambda (x) (beta 1.0 concentration))))
    (lambda () (sample-stick-index V 1))))] 


; DPmem is a procedure that takes two arguments -- the concentration
; to a Dirichlet process and a base sampling procedure
; DPmem returns a procedure 
[assume DPmem (lambda (concentration base)
  (begin 
    (define get-value-from-cache-or-sample 
                           (mem (lambda (args stick-index) 
                                        (apply base args))))
    (define get-stick-picking-procedure-from-cache 
                            (mem (lambda (args) 
              (make-sethuraman-stick-picking-procedure concentration))))
    (lambda varargs
        ; when the returned function is called, the first thing 
        ; it does is get  the cached stick breaking 
        ; procedure for the passed in arguments
        ; and _calls_ it to get an index
        (begin 
           (define index ((get-stick-picking-procedure-from-cache varargs)))
            ; if, for the given set of arguments and 
            ; just sampled index a return value has already
            ; been computed, get it from the cache
            ; and return it, otherwise sample a new value
            (get-value-from-cache-or-sample varargs index)))))]
            
[assume H (lambda () (list (normal 50000.00 30000.0) (* (gamma 1 1) 3000.0)))]

[assume base-concentration 3.0]
[assume intra-groups-concentration 3.0]

[assume base-dp (DPmem base-concentration H)]
[assume get-group-dp
  (mem (lambda (group-id) (DPmem intra-groups-concentration base-dp)))]
[assume sample-from-group-dp
  (lambda (group-id) ((get-group-dp group-id)))]

[assume get-country-parameters
  (mem (lambda (country-id continent-id) (sample-from-group-dp continent-id)))]

[observe-csv
  "http://www.robots.ox.ac.uk/~fwood/anglican/teaching/mlss2014/py_mem/data.csv"
  (apply normal (get-country-parameters $1 $8)) $4]

[predict (apply normal (sample-from-group-dp "Africa"))]
[predict (apply normal (sample-from-group-dp "Europe"))]
