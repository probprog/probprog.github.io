
; sample-stick-index is a procedure that samples an index from
; a potentially infinite dimensional discrete distribution 
; lazily constructed by a stick breaking rule
[assume sample-stick-index (lambda (breaking-rule index)
  (if (flip (breaking-rule index))
      index
      (sample-stick-index breaking-rule (+ index 1))))]


; pitman-yor-stick-picking-procedure returns a procedure 
; that picks a stick each time its called from the set of sticks
; lazily constructed via the closed-over two-parameters stick breaking
; rule
[assume make-pitman-yor-stick-picking-procedure
  (lambda (concentration discount)
    (begin
      (define V (mem (lambda (index) (beta (+ concentration (* index discount))
                                           (- 1 discount)))))
      (lambda () (sample-stick-index V 1))))] 


; PYmem is a procedure that takes three arguments --
; the concentration and the discount
; to a Pitman-Yor process and a base sampling procedure.
; PYmem returns a procedure 
[assume PYmem (lambda (concentration discount base)
  (begin 
    (define get-value-from-cache-or-sample 
                           (mem (lambda (args stick-index) 
                                        (apply base args))))
    (define get-stick-picking-procedure-from-cache 
                            (mem (lambda (args) 
              (make-pitman-yor-stick-picking-procedure
                 concentration discount))))
    (lambda varargs
        ; when the returned function is called, the first thing 
        ; it does is get the cached stick breaking 
        ; procedure for the passed in arguments
        ; and _calls_ it to get an index
        (begin 
           (define index ((get-stick-picking-procedure-from-cache varargs)))
            ; if, for the given set of arguments and 
            ; just sampled index a return value has already
            ; been computed, get it from the cache
            ; and return it, otherwise sample a new value
            (get-value-from-cache-or-sample varargs index)))))]

[assume H (lambda () (list (normal 50000.00 30000.0) (* (gamma 1 1) 3000.0)))]
                         
[assume concentration 3.0]
[assume discount 0.0001]
[assume process (PYmem concentration discount H)]
                         
[assume get-country-parameters (mem (lambda (country) (process)))]

[observe-csv
  "http://www.robots.ox.ac.uk/~fwood/anglican/teaching/mlss2014/py_mem/data.csv"
  (apply normal (get-country-parameters $1)) $4]
  
[predict (= (get-country-parameters "Iceland")
            (get-country-parameters "Germany"))]
            